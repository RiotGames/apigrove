/**
 * Copyright Â© 2012 Alcatel-Lucent.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 * Licensed to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-27 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.03.19 at 02:26:27 PM CET 
//


package com.alu.e3.prov.restapi.model;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * The API target host model 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "targetHost", propOrder = {
		"url",
		"site",
		"authentication",
		"connectionParameters"
})
public class TargetHost {
	/**
	 * The URL to the target host
	 */
	@XmlElement(required = true)
	protected String url;

	/**
	 * The site destination of this target host
	 */
	@XmlElement(required = false)
	protected String site;

	/**
	 * The authentication (South Bound) data to access the target host
	 */
	protected Authentication authentication;

	/**
	 * The connection parameters for this target host.
	 */
	@XmlElement(required = false)
	protected ConnectionParameters connectionParameters;
	

	/**
	 * Gets the value of the url property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the value of the url property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setUrl(String value) {
		this.url = value;
	}

	/**
	 * Gets the value of the site property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getSite() {
		return site;
	}


	/**
	 * Sets the value of the site property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setSite(String site) {
		this.site = site;
	}

	/**
	 * Gets the value of the authentication property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link Authentication }
	 *     
	 */
	public Authentication getAuthentication() {
		return authentication;
	}

	/**
	 * Sets the value of the authentication property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link Authentication }
	 *     
	 */
	public void setAuthentication(Authentication value) {
		this.authentication = value;
	}

	/**
	 * Gets the value of the connectionParameters property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link ConnectionParameters }
	 *     
	 */
	public ConnectionParameters getConnectionParameters() {
		return connectionParameters;
	}

	/**
	 * Sets the value of the connectionParameters property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link ConnectionParameters }
	 *     
	 */
	public void setConnectionParameters(ConnectionParameters connectionParameters) {
		this.connectionParameters = connectionParameters;
	}


	public String getUrlParams() {
		String params = "";

		if (url!=null && url.contains("?")) {
			params = url.split("\\?")[1];
			// & => &amp; conversion
			if (params.contains("&") && !params.contains("&amp;")) {
				params = params.replaceAll("&", "&amp;");
			}
		}

		return params;
	}

	/**
	 * Gets the url without all params
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getCamelUrlWithoutParams() {
		String urlWithoutParams;
		urlWithoutParams = url.contains("?") ? url.substring(0, url.indexOf("?")) : url;
		urlWithoutParams = urlWithoutParams.replace("://", "4:");
		return urlWithoutParams;
	}

	/**
	 * Gets the url without all params
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getHostPort() {
		URL url;
		try {
			url = new URL(this.url);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException("URL target wrong formatted:"+this.url, e);
		}

		String hostPort;
		if (url.getPort() < 0)
			hostPort = url.getHost();
		else
			hostPort = url.getHost() + ":" + url.getPort();

		return hostPort;
	}

}
